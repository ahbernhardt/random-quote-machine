{"version":3,"sources":["components/Header/Header.js","components/Spinner/Spinner.js","components/Quote.js","components/ErrorMessage/ErrorMessage.js","components/ThemeList/ThemeList.js","components/QuoteBox/QuoteBox.js","components/Theme/Theme.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","title","className","id","aria-hidden","Spinner","Quote","quote","text","author","ErrorMessage","ThemeList","onChangeTheme","activeTheme","map","color","i","key","onClick","QuoteBox","onNewQuote","isFetching","isError","href","rel","target","type","disabled","Theme","children","theme","style","backgroundColor","Footer","App","state","error","getNewQuote","setState","fetch","then","res","json","data","quoteAuthor","quoteText","catch","console","log","handleThemeColor","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5c6e4f6b.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\nimport PropTypes from 'prop-types';\n\nconst Header = ({title}) => (\n    <div className=\"header\">\n\n        <h1>\n        <span className=\"quote-icon-left\">\n            <i id=\"left\" className=\"fa fa-quote-left\" aria-hidden=\"true\"/>\n        </span>\n            {title}\n        <span className=\"quote-icon-right\">\n        <i id=\"right\" className=\"fa fa-quote-right\" aria-hidden=\"true\"/>\n    </span>\n        </h1>\n\n    </div>\n);\n\nHeader.propTypes = {\n    title: PropTypes.string\n};\n\nexport default Header;\n","import React from 'react';\nimport './Spinner.css';\n\nconst Spinner = () => (\n  <span className=\"spinner\">\n    <i className=\"fas fa-spin fa-pulse fa-spinner\" />\n  </span>\n);\n\nexport default Spinner;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\n\nconst Quote = ({ quote }) => (\n  <Fragment>\n    <p id=\"text\">\n      <span className=\"quote-content-icon\">\n        <i className=\"fas fa-quote-left\" />\n      </span>\n      {quote.text}\n    </p>\n    <p id=\"author\">\n      &mdash;<em>{quote.author}</em>\n    </p>\n  </Fragment>\n);\n\nQuote.propTypes = {\n  quote: PropTypes.shape({\n    text: PropTypes.string.isRequired,\n    author: PropTypes.string.isRequired\n  })\n};\n\nexport default Quote;\n","import React from 'react';\nimport './ErrorMessage.css';\n\nconst ErrorMessage = () => (\n  <div className=\"error-box\">\n    <span>\n      <i className=\"fas fa-exclamation-circle\" />\n    </span>\n    <span>Something went wrong! Please try again.</span>\n  </div>\n);\n\nexport default ErrorMessage;\n","import React from 'react';\nimport './ThemeList.css';\nimport PropTypes from 'prop-types';\n\nconst ThemeList = ({ onChangeTheme, activeTheme }) => {\n  const colorThemes = ['#2c3e50', '#e67e22', '#9b59b6','#37af65', '#c0392b', '#3498db'];\n  return (\n    <ul className=\"theme-list\">\n      {colorThemes.map((color, i) => (\n        <li\n          key={color}\n          className={`theme-item theme-item-${i + 1} ${\n            activeTheme === color ? 'active-theme' : ''\n          }`}\n          onClick={() => onChangeTheme(color)}\n        />\n      ))}\n    </ul>\n  );\n};\n\nThemeList.propTypes = {\n  onChangeTheme: PropTypes.func.isRequired,\n  activeTheme: PropTypes.string.isRequired\n};\n\nexport default ThemeList;\n","import React, { Fragment } from 'react';\nimport './QuoteBox.css';\nimport Spinner from '../Spinner/Spinner';\nimport Quote from '../Quote';\nimport ErrorMessage from '../ErrorMessage/ErrorMessage';\nimport ThemeList from '../ThemeList/ThemeList';\nimport PropTypes from 'prop-types';\n\n\nconst QuoteBox = ({\n  quote,\n  onNewQuote,\n  isFetching,\n  isError,\n  onChangeTheme,\n  activeTheme\n}) => (\n  <Fragment>\n    <div className=\"quote-content\">\n      {isFetching && <Spinner />}\n      {isError && <ErrorMessage />}\n      <div className={isFetching || isError ? 'hide-quote' : ''}>\n        <Quote quote={quote} />\n      </div>\n    </div>\n    <ThemeList onChangeTheme={onChangeTheme} activeTheme={activeTheme} />\n    <div className=\"quote-controls\">\n      <a\n        href={`https://twitter.com/intent/tweet?text=${quote.text}- ${\n          quote.author\n        }`}\n        rel=\"noopener noreferrer\"\n        target=\"_blank\"\n        id=\"tweet-quote\"\n      >\n        <i className=\"fab fa-twitter\" /> Tweet\n      </a>\n      <button\n        type=\"button\"\n        id=\"new-quote\"\n        onClick={onNewQuote}\n        disabled={isFetching}\n      >\n        <i className=\"fab fa-telegram-plane\" /> New Quote\n      </button>\n    </div>\n  </Fragment>\n);\n\nQuoteBox.propTypes = {\n  quote: PropTypes.object,\n  onNewQuote: PropTypes.func.isRequired,\n  isFetching: PropTypes.bool.isRequired,\n  isError: PropTypes.bool.isRequired,\n  onChangeTheme: PropTypes.func,\n  activeTheme: PropTypes.string\n};\n\nexport default QuoteBox;\n","import React from 'react';\nimport './Theme.css';\nimport PropTypes from 'prop-types';\n\nconst Theme = ({ children, theme }) => (\n  <div className=\"theme\" style={{ backgroundColor: theme, color: theme }}>\n    {children}\n  </div>\n);\n\nTheme.propTypes = {\n  children: PropTypes.node,\n  theme: PropTypes.string.isRequired\n};\n\nexport default Theme;\n","import React from 'react';\nimport './Footer.css';\n\nconst Footer = () => (\n  <footer className=\"footer\">\n    <p>\n        Â© Copyright 2020 -\n        <a className=\"footer-link\" href=\"https://github.com/anguyen0208\" target=\"_blank\" rel=\"noopener noreferrer\">\n            anhnguyen.page\n        </a>\n        <span> <span> </span>| </span>\n        <span>\n            Repo Link:{' '}\n            <a className=\"footer-link\" href=\"https://github.com/anguyen0208/random-quote-machine\" target=\"_blank\" rel=\"noopener noreferrer\">\n                <i className=\"fab fa-github\" />\n            </a>\n        </span>\n    </p>\n  </footer>\n);\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport QuoteBox from './components/QuoteBox/QuoteBox';\nimport Theme from './components/Theme/Theme';\nimport Footer from './components/Footer/Footer';\n\nclass App extends Component {\n  state = {\n    isFetching: false,\n    quote: {\n      text: '',\n      author: ''\n    },\n    error: false,\n    theme: '#2c3e50'\n  };\n\n  componentDidMount() {\n    this.getNewQuote();\n  }\n\n  getNewQuote = () => {\n    this.setState({\n      isFetching: !this.state.isFetching,\n      error: false\n    });\n\n    fetch(\n      'https://cors-anywhere.herokuapp.com/https://api.forismatic.com/api/1.0/?method=getQuote&format=json&lang=en'\n    )\n      .then(res => res.json())\n      .then(data => {\n        const { quoteAuthor, quoteText } = data;\n        const quote = {\n          text: quoteText,\n          author: quoteAuthor || 'Unknown'\n        };\n        this.setState({\n          isFetching: !this.state.isFetching,\n          quote\n        });\n      })\n      .catch(error => {\n        console.log(error);\n        this.setState({\n          error: true,\n          isFetching: !this.state.isFetching\n        });\n      });\n  };\n\n  handleThemeColor = color => {\n    this.setState({\n      theme: color\n    });\n  };\n\n  render() {\n    const { isFetching, quote, error, theme } = this.state;\n\n    return (\n      <Theme theme={theme}>\n        <div className=\"container\">\n          <Header title=\"Random Quote Machine\" />\n          <div id=\"quote-box\">\n            <QuoteBox\n              quote={quote}\n              onNewQuote={this.getNewQuote}\n              isFetching={isFetching}\n              isError={error}\n              onChangeTheme={this.handleThemeColor}\n              activeTheme={theme}\n            />\n          </div>\n          <Footer />\n        </div>\n      </Theme>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}